[{"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\index.js":"1","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\App.js":"2","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\reportWebVitals.js":"3","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\pages\\Home.js":"4","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\pages\\EditorPage.js":"5","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\socket.js":"6","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\Actions.js":"7","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Client.js":"8","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Compiler.js":"9","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Editor.js":"10"},{"size":289,"mtime":1712651268000,"results":"11","hashOfConfig":"12"},{"size":987,"mtime":1709919034000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1709919034000,"results":"14","hashOfConfig":"12"},{"size":2673,"mtime":1718108694478,"results":"15","hashOfConfig":"12"},{"size":5282,"mtime":1714546082000,"results":"16","hashOfConfig":"12"},{"size":309,"mtime":1709919034000,"results":"17","hashOfConfig":"12"},{"size":202,"mtime":1709919034000,"results":"18","hashOfConfig":"12"},{"size":312,"mtime":1709919034000,"results":"19","hashOfConfig":"12"},{"size":5475,"mtime":1714557438000,"results":"20","hashOfConfig":"12"},{"size":1791,"mtime":1712640372000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ssxctj",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\index.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\App.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\reportWebVitals.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\pages\\Home.js",["55"],[],"import React, { useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\nconst Home = () => {\n    const navigate = useNavigate();\n\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n    };\n\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('ROOM ID & username is required');\n            return;\n        }\n\n        // Redirect\n        navigate(`/editor/${roomId}`, {\n            state: {\n                username,\n            },\n        });\n    };\n\n    const handleInputEnter = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    };\n    return (\n        <div className=\"homePageWrapper\">\n            <div className=\"formWrapper\">\n                <img\n                    className=\"homePageLogo\"\n                    src=\"/code-sync.png\"\n                    alt=\"code-sync-logo\"\n                />\n                <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\n                <div className=\"inputGroup\">\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"ROOM ID\"\n                        onChange={(e) => setRoomId(e.target.value)}\n                        value={roomId}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"USERNAME\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        value={username}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\n                        Join\n                    </button>\n                    <span className=\"createInfo\">\n                        If you don't have an invite then create &nbsp;\n                        <a\n                            onClick={createNewRoom}\n                            href=\"\"\n                            className=\"createNewBtn\"\n                        >\n                            new room\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <footer>\n            <h4>Made By&nbsp; {'AsmitðŸ’›'}</h4>\n            </footer>\n        </div>\n    );\n};\n\nexport default Home;\n","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\pages\\EditorPage.js",["56","57","58"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\nimport Compiler from '../components/Compiler';\n\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const codeRef = useRef('');\n    const location = useLocation();\n    const { roomId } = useParams();\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n    const [code, setCode] = useState(localStorage.getItem('input') || '');\n    const [copiedCode, setCopiedCode] = useState('');\n\n    const handleCodeChange = (newCode) => {\n        setCode(newCode);\n    };\n\n    const passCodeToCompiler = () => {\n        setCode(codeRef.current);\n    };\n\n    const copyToCompiler = () => {\n        setCopiedCode(codeRef.current);\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            //socketRef.current.disconnect();\n            //socketRef.current.off(ACTIONS.JOINED);\n            //socketRef.current.off(ACTIONS.DISCONNECTED);\n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                        <img\n                            className=\"logoImage\"\n                            src=\"/code-sync.png\"\n                            alt=\"logo\"\n                        />\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n                {/* <button className=\"btn passCodeBtn\" onClick={passCodeToCompiler}>\n                    Pass Code to Compiler\n                </button> */}\n                {/* <button className=\"btn copyToCompilerBtn\" onClick={copyToCompiler}>\n                    Copy to Compiler\n                </button> */}\n            </div>\n\n            <div className=\"editorWrap\">\n                <Editor\n                    socketRef={socketRef}\n                    roomId={roomId}\n                    onCodeChange={handleCodeChange}\n                />\n            </div>\n\n            <div className='Output_Section'>\n                <label htmlFor=\"Output\" className='text-light'>Output</label>\n                <textarea className=\"form-control\" aria-label=\"last name\"></textarea>\n            </div>\n            \n            <Compiler code={code} copiedCode={copiedCode} />\n        </div>\n    );\n};\n\nexport default EditorPage;\n","C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\socket.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\Actions.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Client.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Compiler.js",[],[],"C:\\Users\\asmit rai\\Downloads\\CodeCollab\\CodeCollab\\code-collab\\src\\components\\Editor.js",["59","60","61"],[],"import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: 'text/javascript',\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n",{"ruleId":"62","severity":1,"message":"63","line":68,"column":25,"nodeType":"64","endLine":72,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":24,"column":11,"nodeType":"67","messageId":"68","endLine":24,"endColumn":29},{"ruleId":"65","severity":1,"message":"69","line":28,"column":11,"nodeType":"67","messageId":"68","endLine":28,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":82,"column":8,"nodeType":"72","endLine":82,"endColumn":10,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":39,"column":8,"nodeType":"72","endLine":39,"endColumn":10,"suggestions":"75"},{"ruleId":"70","severity":1,"message":"76","line":51,"column":23,"nodeType":"67","endLine":51,"endColumn":30},{"ruleId":"70","severity":1,"message":"77","line":53,"column":8,"nodeType":"72","endLine":53,"endColumn":27,"suggestions":"78"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'passCodeToCompiler' is assigned a value but never used.","Identifier","unusedVar","'copyToCompiler' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["80"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"88","text":"89"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"90","text":"91"},"Update the dependencies array to be: [socketRef]",{"range":"92","text":"93"},[2874,2876],"[location.state?.username, reactNavigator, roomId]",[1323,1325],"[onCodeChange, roomId, socketRef]",[1687,1706],"[socketRef]"]